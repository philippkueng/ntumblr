// Generated by CoffeeScript 1.3.1
(function() {
  var doublequote, fs, qs, quote, _hexSlice, _toHex;

  fs = require('fs');

  qs = require('querystring');

  quote = require('./escape-py').quote;

  doublequote = require('./escape-py').doublequote;

  _toHex = function(n) {
    if (n < 16) {
      return "0" + n.toString(16);
    }
    return n.toString(16);
  };

  _hexSlice = function(buffer, start, end) {
    var b, deci, i, len, out;
    len = buffer.length;
    if (!start || start < 0) {
      start = 0;
    }
    if (!end || end < 0 || end > len) {
      end = len;
    }
    out = "";
    i = start;
    while (i < end) {
      b = _toHex(buffer[i]);
      deci = parseInt("0x" + b);
      if ((32 < deci && deci < 126)) {
        b = String.fromCharCode(deci);
      } else {
        b = "0x" + b;
      }
      out += b.toUpperCase();
      i++;
    }
    return out;
  };

  module.exports.encodeToHexOld = function(buffer) {
    return "data:" + _hexSlice(buffer);
  };

  module.exports.encodeToHex = function(buffer) {
    return "data:" + (buffer.toString('binary'));
  };

  module.exports.replaceAfterEncode = function(str, originalBody) {
    var pattern, _s;
    if (originalBody == null) {
      originalBody = null;
    }
    pattern = /data%3A([\w\!\'\(\)\*\-\._~%]+)/g;
    if (originalBody != null) {
      pattern = /data%255B(\d+)%255D%3Ddata%253A([\w\!\'\(\)\*\-\._~%]+)/g;
    }
    _s = str.replace(pattern, function(a, g1, g2) {
      var data, index;
      if (!isNaN(g1)) {
        index = g1;
        data = originalBody["data[" + index + "]"].replace('data:', '');
        g1 = g2;
        g1 = ("data%5B" + index + "%5D%3D") + doublequote(data);
      } else {
        g1 = quote(decodeURIComponent(g1));
        g1 = g1.replace(/%20/g, "+");
      }
      return g1;
    });
    return _s;
  };

}).call(this);
